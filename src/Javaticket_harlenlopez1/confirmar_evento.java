/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Javaticket_harlenlopez1;

import static Javaticket_harlenlopez1.Administracion_de_eventos.irA;
import static Javaticket_harlenlopez1.Crear_Evento.eventos;
import static Javaticket_harlenlopez1.Crear_Evento.user;
import static Javaticket_harlenlopez1.Login.usuarioLogin;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;

/**
 *
 * @author adalb
 */
public class confirmar_evento extends javax.swing.JFrame {

    /**
     * Creates new form confirmar_evento
     */
    public confirmar_evento() {
        initComponents();
        this.setResizable(false);
        this.setLocationRelativeTo(null);
    }
    public static int pos=0,tipo=1;
    public static double monto;
    public static String codigoLogin,mensaje;
    public static Date fecha=Calendar.getInstance().getTime();
    public static ArrayList<Evento> eventosCancelados=new ArrayList<>();
    public static Date hoy=new Date(124,1,12);
    public static Date diaAntes = new Date();
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CodigoTextbox = new javax.swing.JTextField();
        backgroundLabel = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(CodigoTextbox, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 40, 334, -1));

        backgroundLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/confirmar_evento.png"))); // NOI18N
        getContentPane().add(backgroundLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 522, 265));

        jButton1.setText("Ingresar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, 140, 50));

        jButton2.setText("Cancelar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 170, 150, 50));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        codigoLogin=CodigoTextbox.getText();
        boolean noExiste=true;
        if(codigoLogin.isEmpty()){
                JOptionPane.showMessageDialog(null, "Por favor, llenar todos los campos.");
        }else{
            for(int indice=0;indice<eventos.size();indice++){
                if(eventos.get(indice)!=null){ 
                    if(eventos.get(indice).getCodigo().equals(codigoLogin)){
                        if(irA==1){
                            if(eventos.get(indice).getClase()=="Deportivo"){
                                if(user.get(indice).equals(usuarioLogin)){
                                    if(eventos.get(indice).getFecha().before(hoy)){
                                        JOptionPane.showMessageDialog(null, "El evento ya se realizo.");
                                        noExiste=false;
                                    }else{
                                        diaAntes=new Date(eventos.get(indice).getFecha().getTime()-24*60*60*1000);
                                        if(hoy.equals(diaAntes)){
                                            monto=eventos.get(indice).getMonto()*0.5;
                                            JOptionPane.showMessageDialog(null, "Se le cobro por indemnizacion: L."+monto);
                                        }else{
                                            monto=0;
                                        }
                                        Evento_Deportivo borrarEvento=new Evento_Deportivo("","cancelado","Deportivo","",fecha,monto,0,
                                        "","","");
                                        eventos.set(indice,borrarEvento);
                                        eventosCancelados.add(new Evento_Cancelado(eventos.get(indice).getCodigo(), eventos.get(indice).getClase(),
                                                eventos.get(indice).getTitulo(), eventos.get(indice).getDescripcion(), eventos.get(indice).getFecha(),
                                                eventos.get(indice).getMonto(), eventos.get(indice).getCantidad()));
                                        JOptionPane.showMessageDialog(null, "Ha cancelado exitosamente el evento.");
                                        noExiste=false;
                                        Administracion_de_eventos pasar=new Administracion_de_eventos();
                                        pasar.setVisible(true);
                                        this.setVisible(false);
                                    }
                                    break;
                                }else{
                                    JOptionPane.showMessageDialog(null, "Solo el que creo el evento lo puede borrar.");
                                    noExiste=false;
                                    break;
                                }
                          
                            }else if(eventos.get(indice).getClase()=="Musical"){
                                if(user.get(indice).equals(usuarioLogin)){
                                    if(eventos.get(indice).getFecha().before(hoy)){
                                        JOptionPane.showMessageDialog(null, "El evento ya se realizo.");
                                        noExiste=false;
                                    }else{
                                        diaAntes=new Date(eventos.get(indice).getFecha().getTime()-24*60*60*1000);
                                        if(hoy.equals(diaAntes)){
                                            monto=eventos.get(indice).getMonto()*0.5;
                                            JOptionPane.showMessageDialog(null, "Se le cobro por indemnizacion: L."+monto);
                                        }else{
                                            monto=0;
                                        }
                                        Evento_Musical borrarEvento=new Evento_Musical("","cancelado","Musical","",fecha,0,0,"");
                                        eventos.set(indice,borrarEvento);
                                        eventosCancelados.add(new Evento_Cancelado(eventos.get(indice).getCodigo(), eventos.get(indice).getClase(),
                                                eventos.get(indice).getTitulo(), eventos.get(indice).getDescripcion(), eventos.get(indice).getFecha(),
                                                eventos.get(indice).getMonto(), eventos.get(indice).getCantidad()));
                                        JOptionPane.showMessageDialog(null, "Ha cancelado exitosamente el evento.");
                                        noExiste=false;
                                        Administracion_de_eventos pasar=new Administracion_de_eventos();
                                        pasar.setVisible(true);
                                        this.setVisible(false);
                                    }
                                    break;
                                }else{
                                    JOptionPane.showMessageDialog(null, "Solo el que creo el evento lo puede borrar.");
                                    noExiste=false;
                                    break;
                                }
                                
                            }else if(eventos.get(indice).getClase()=="Religioso"){
                                if(user.get(indice).equals(usuarioLogin)){
                                    if(eventos.get(indice).getFecha().before(hoy)){
                                        JOptionPane.showMessageDialog(null, "El evento ya se realizo.");
                                        noExiste=false;
                                    }else{
                                        Evento_Religioso borrarEvento=new Evento_Religioso("","cancelado","Religioso","",
                                        fecha,0,0);
                                        eventos.set(indice,borrarEvento);
                                        eventosCancelados.add(new Evento_Cancelado(eventos.get(indice).getCodigo(), eventos.get(indice).getClase(),
                                                eventos.get(indice).getTitulo(), eventos.get(indice).getDescripcion(), eventos.get(indice).getFecha(),
                                                eventos.get(indice).getMonto(), eventos.get(indice).getCantidad()));
                                        JOptionPane.showMessageDialog(null, "Ha cancelado exitosamente el evento.");
                                        noExiste=false;
                                        Administracion_de_eventos pasar=new Administracion_de_eventos();
                                        pasar.setVisible(true);
                                        this.setVisible(false);
                                    }
                                    break;
                                    
                                }else{
                                    JOptionPane.showMessageDialog(null, "Solo el que creo el evento lo puede borrar.");
                                    noExiste=false;
                                    break;
                                }
                            }
                        }else if(irA==2){
                            pos=indice;
                            noExiste=false;
                            if(eventos.get(indice).getClase().equals("Deportivo")){
                                tipo=1;
                            }else if(eventos.get(indice).getClase().equals("Musical")){
                                tipo=2;
                            }else if(eventos.get(indice).getClase().equals("Religioso")){
                                tipo=3;
                            }
                            Editar_Evento pasar=new Editar_Evento();
                            pasar.setVisible(true);
                            this.setVisible(false);
                            break;
                        }else if(irA==3){
                            pos=indice;
                            noExiste=false;
                            JOptionPane.showMessageDialog(null, "Titulo de evento: "+eventos.get(indice).getTitulo()+
                                    "\n"+"Codigo de Evento: "+eventos.get(indice).getCodigo()+", Monto de Evento: "+eventos.get(indice).getMonto()+
                                    "\n"+"Tipo de Evento: "+eventos.get(indice).getClase()+", Personas que asisteron al evento: "+eventos.get(indice).getCantidad()+
                                    "\n"+"Fecha del evento: "+eventos.get(indice).getFecha()+
                                    "\n"+"Descripcion del evento: "+eventos.get(indice).getDescripcion());
                            break;
                        }
                    }
                }
            }
            if(noExiste==true){
                JOptionPane.showMessageDialog(null, "Este evento no existe.");
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        Administracion_de_eventos pasar=new Administracion_de_eventos();
        pasar.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(confirmar_evento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(confirmar_evento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(confirmar_evento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(confirmar_evento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new confirmar_evento().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField CodigoTextbox;
    private javax.swing.JLabel backgroundLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    // End of variables declaration//GEN-END:variables
}
